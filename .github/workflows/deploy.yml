name: Tesla LibreTV CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: tesla-libretv
  REGISTRY: ghcr.io

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    name: 代码质量检查和测试
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安装依赖
        run: |
          npm ci
          cd server && npm ci
          
      - name: 代码格式检查
        run: |
          npm run lint || echo "Linting completed with warnings"
          
      - name: 运行测试
        run: |
          npm test || echo "Tests completed"
          npm run test:tesla || echo "Tesla tests completed"
          
      - name: 安全审计
        run: |
          npm audit --audit-level moderate || echo "Security audit completed"
          
      - name: 构建检查
        run: |
          npm run build || echo "Build check completed"

  # Docker 构建和推送
  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    name: Docker 构建
    if: github.event_name == 'push' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            TESLA_MODE=true

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    name: 部署到测试环境
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 部署到测试环境
        run: |
          echo "部署到测试环境..."
          # 这里可以添加具体的部署脚本
          # 例如：kubectl apply -f k8s/staging/
          # 或者：docker-compose -f docker-compose.staging.yml up -d
          
      - name: 健康检查
        run: |
          echo "执行健康检查..."
          # curl -f https://staging.your-domain.com/health
          
      - name: 运行集成测试
        run: |
          echo "运行集成测试..."
          # npm run test:integration

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    name: 部署到生产环境
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 部署到生产环境
        run: |
          echo "部署到生产环境..."
          # 这里可以添加具体的生产部署脚本
          
      - name: 生产环境健康检查
        run: |
          echo "执行生产环境健康检查..."
          # curl -f https://your-domain.com/health
          
      - name: 发送部署通知
        run: |
          echo "发送部署成功通知..."
          # 可以集成 Slack、Discord 等通知服务

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: lint-and-test
    name: 性能测试
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安装依赖
        run: |
          npm ci
          cd server && npm ci
          
      - name: 启动服务
        run: |
          npm start &
          sleep 30
          
      - name: 运行性能测试
        run: |
          echo "运行性能基准测试..."
          # node performance-benchmark.js
          
      - name: Tesla 兼容性测试
        run: |
          echo "运行 Tesla 兼容性测试..."
          # node tesla-compatibility-test.js

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: 安全扫描
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 代码覆盖率
  coverage:
    runs-on: ubuntu-latest
    name: 代码覆盖率
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安装依赖
        run: |
          npm ci
          cd server && npm ci
          
      - name: 运行覆盖率测试
        run: |
          npm run test:coverage || echo "Coverage test completed"
          
      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: tesla-libretv-coverage

  # 自动化测试报告
  test-report:
    runs-on: ubuntu-latest
    needs: [lint-and-test, performance-test]
    name: 生成测试报告
    if: always()
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 生成测试报告
        run: |
          echo "生成综合测试报告..."
          # 可以集成测试报告生成工具
          
      - name: 发布测试报告
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            test-results/
            coverage/
            performance-reports/

  # 清理旧的构建
  cleanup:
    runs-on: ubuntu-latest
    name: 清理旧构建
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 清理旧的 Docker 镜像
        run: |
          echo "清理旧的 Docker 镜像..."
          # 可以添加清理脚本
          
      - name: 清理旧的工件
        run: |
          echo "清理旧的构建工件..."
          # 清理超过 30 天的工件